#include <bits/stdc++.h>using namespace std;// #include <ext/pb_ds/assoc_container.hpp>// #include <ext/pb_ds/tree_policy.hpp>// using namespace __gnu_pbds;// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_x_update>pbds;#define fastread() (ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL))#define ll long long#define int long long int#define pb push_back#define vll vector<ll>#define vpll vector<pair<ll, ll>>#define sll set<ll>#define mll map<ll, ll>#define F first#define S second#define fr(i, x, y) for (int i = x; i < y; i++)#define rfr(i, x, y) for (int i = n - 1; i >= 0; i--)#define ra(a, n) \    ll a[n];     \    fr(i, 0, n) cin >> a[i]#define rv(v, n)     \    vector<ll> v(n); \    fr(i, 0, n) cin >> v[i]#define debug(x) cout << #x << " " << x << '\n'// #define endl "\n"#define Endl "\n"#define ENdl "\n"#define hae cout << "YES" << endl#define ds(xx) cout << xx << '\n';#define na cout << "NO" << endl#define all(x) x.begin(), x.end()#define rall(x) x.rbegin(), x.rend()#define setbit(x, k) (x |= (1LL << k))#define unsetbit(x, k) (x &= ~(1LL << k))#define checkbit(x, k) ((x >> k) & 1LL)const ll inf = 1e18;int dx[] = {-1, 1, 0, 0, -1, -1, 1, 1};int dy[] = {0, 0, -1, 1, -1, 1, -1, 1};const int N = 1e5 + 10;const ll mod = 1e9 + 7; int ask(int x, vector<int> &v){    cout << "? " << x << " " << v.size() << " ";    for (auto it : v)        cout << it << " ";    cout << endl;    int ans;    if (cin >> ans)    {        if (ans == -1)            exit(0);        else            return ans;    }    else        exit(0);} int fun(int cur, vll &vec){    for (auto x : vec)    {        vll S = {cur, x};        int res = ask(cur, S);        if (res == 2)            return x;    }    return -1;} void solve(int tc){    int n;    cin >> n;     vll a(n);    fr(i, 0, n) a[i] = i + 1;     vll len(n + 1, -1);    fr(i, 0, n) len[i + 1] = ask(i + 1, a);     int st = 1, mx = len[1];    fr(i, 2, n + 1)    {        if (len[i] > mx)        {            mx = len[i];            st = i;        }    }     vector<vll> lev(mx + 2);    fr(i, 1, n + 1)    {        if (len[i] >= 1 && len[i] <= mx)            lev[len[i]].pb(i);    }     vll ans;    vector<bool> vis(n + 1, false);    int cur = st;    ans.pb(cur);    vis[cur] = true;     for (int lvl = mx - 1; lvl >= 1; lvl--)    {        vll vec;        for (auto x : lev[lvl])            if (!vis[x])                vec.pb(x);         int pore = fun(cur, vec);        if (pore == -1)        {            cout << "! " << ans.size() << " ";            for (auto x : ans)                cout << x << " ";            cout << endl;            return;        }         ans.pb(pore);        vis[pore] = true;        cur = pore;    }     cout << "! " << ans.size() << " ";    for (auto x : ans)        cout << x << " ";    cout << endl;}  int32_t main(){    fastread();    ll T = 1;    cin >> T;    for (ll t = 1; t <= T; t++)        solve(t);    return 0;}