#include <bits/stdc++.h>using namespace std;// #include <ext/pb_ds/assoc_container.hpp>// #include <ext/pb_ds/tree_policy.hpp>// using namespace __gnu_pbds;// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>pbds;#define fastread() (ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL))#define ll long long#define int long long int#define pb push_back#define vll vector<ll>#define vpll vector<pair<ll, ll>>#define sll set<ll>#define mll map<ll, ll>#define F first#define S second#define fr(i, x, y) for (int i = x; i < y; i++)#define rfr(i, x, y) for (int i = n - 1; i >= 0; i--)#define ra(a, n) \    ll a[n];     \    fr(i, 0, n) cin >> a[i]#define rv(v, n)     \    vector<ll> v(n); \    fr(i, 0, n) cin >> v[i]#define debug(x) cout << #x << " " << x << '\n'#define endl "\n"#define Endl "\n"#define ENdl "\n"#define hae cout << "YES" << endl#define ds(xx) cout << xx << '\n';#define na cout << "NO" << endl#define all(x) x.begin(), x.end()#define rall(x) x.rbegin(), x.rend()#define setbit(x, k) (x |= (1LL << k))#define unsetbit(x, k) (x &= ~(1LL << k))#define checkbit(x, k) ((x >> k) & 1LL)const ll inf = 3e18;int dx[] = {-1, 1, 0, 0, -1, -1, 1, 1};int dy[] = {0, 0, -1, 1, -1, 1, -1, 1};const int N = 2e5 + 10;const ll mod = 1e9 + 7; //inverstion count using merge sort int cnt = 0; void merge(vector<int> &arr, int left,           int mid, int right){     int n1 = mid - left + 1;    int n2 = right - mid;    vector<int> L(n1), R(n2);    for (int i = 0; i < n1; i++)        L[i] = arr[left + i];    for (int j = 0; j < n2; j++)        R[j] = arr[mid + 1 + j];     int i = 0, j = 0;    int k = left;    while (i < n1 && j < n2)    {        if (L[i] <= R[j])        {            arr[k] = L[i];            i++;        }        else        {            arr[k] = R[j];            //one line changes            cnt += (n1 - i);            j++;        }        k++;    }    while (i < n1)    {        arr[k] = L[i];        i++;        k++;    }     while (j < n2)    {        arr[k] = R[j];        j++;        k++;    }} void mergeSort(vector<int> &arr, int left, int right){     if (left >= right)        return;     int mid = left + (right - left) / 2;    mergeSort(arr, left, mid);    mergeSort(arr, mid + 1, right);    merge(arr, left, mid, right);} void solve(int tc){    int n;    cin >> n;    rv(a, n);    rv(b, n);    cnt = 0;    mergeSort(a, 0, n - 1);    int fora = cnt;    cnt = 0;    mergeSort(b, 0, n - 1);    int forb = cnt;    for (int i = 0; i < n; i++)    {        if (a[i] != b[i])        {            na;            return;        }    }     if (fora % 2 == forb % 2)        hae;    else        na;} int32_t main(){    fastread();    ll T = 1;    cin >> T;    for (ll t = 1; t <= T; t++)        solve(t);    return 0;}