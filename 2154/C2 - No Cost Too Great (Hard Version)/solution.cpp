#include <bits/stdc++.h>using namespace std; #define int long long#define endl '\n'#define all(x) x.begin(), x.end() const int mx = 200005;int spf[mx];void divs(){    for (int i = 2; i < mx; i++)    {        if (spf[i] == 0)        {            for (int j = i; j < mx; j += i)            {                if (spf[j] == 0)                    spf[j] = i;            }        }    }} vector<int> pf(int x){    vector<int> res;    while (x > 1)    {        int p = spf[x];        if (p == 0)        {            p = x;        }        res.push_back(p);        while (x % p == 0)            x /= p;    }    return res;} void solve(){    int n;    cin >> n;    vector<int> a(n), b(n);    for (auto &x : a)        cin >> x;    for (auto &y : b)        cin >> y;     map<int, int> mp;    for (auto &x : a)    {        auto primes = pf(x);        for (auto p : primes)            mp[p]++;    }     for (auto &pr : mp)    {        if (pr.second > 1)        {            cout << 0 << endl;            return;        }    }     int ans = LLONG_MAX;    for (int i = 0; i < n; ++i)    {        auto primes = pf(a[i] + 1);        for (auto p : primes)        {            if (mp.count(p))                ans = min(ans, b[i]);        }    }     int idx = min_element(all(b)) - b.begin();    int val = a[idx];     auto primeVal = pf(val);    for (auto p : primeVal)    {        auto it = mp.find(p);        if (it != mp.end())        {            it->second--;            if (it->second == 0)                mp.erase(it);        }    }    for (auto &pr : mp)    {        int p = pr.first;        int add = (p - (val % p)) % p;        ans = min(ans, b[idx] * add);    }    sort(all(b));    cout<<min(ans,b[0]+b[1])<<endl;} int32_t main(){    ios::sync_with_stdio(false);    cin.tie(nullptr);    divs();    int t = 1;    cin >> t;    while (t--)        solve();    return 0;}