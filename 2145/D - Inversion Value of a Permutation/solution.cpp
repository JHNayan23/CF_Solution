#include <bits/stdc++.h>using namespace std; #define int long long#define endl '\n'#define all(x) x.begin(), x.end() void solve(){    int n, k;    cin >> n >> k;    int mx = n * (n - 1) / 2;    if (k > mx || k < 0) {        cout << 0 << endl;        return;    }    int tgt = n * n - 2 * k;    map<pair<int,int>, bool> vis;    queue<pair<int,int>> q;    q.push({0, 0});    vis[{0, 0}] = true;     while (!q.empty()) {        auto [s, sum] = q.front(); q.pop();        if (s == n) continue;        for (int l = 1; l <= n - s; l++) {            int ns = s + l;            int nsum = sum + l * l;            if (ns <= n && nsum <= n * n && !vis[{ns, nsum}]) {                vis[{ns, nsum}] = true;                q.push({ns, nsum});            }        }    }     if (!vis[{n, tgt}]) {        cout << 0 << endl;        return;    }     vector<int> seg;    int cs = n, cq = tgt;    while (cs > 0) {        bool found = false;        for (int l = 1; l <= cs; l++) {            int ps = cs - l;            int pq = cq - l * l;            if (ps >= 0 && pq >= 0 && vis[{ps, pq}]) {                seg.push_back(l);                cs = ps;                cq = pq;                found = true;                break;            }        }        if (!found) break;    }     reverse(all(seg));    vector<int> ans(n);    int idx = 0, v = 1;    for (int len : seg) {        vector<int> tmp;        for (int i = 0; i < len; i++) tmp.push_back(v++);        sort(tmp.rbegin(), tmp.rend());        for (int x : tmp) ans[idx++] = x;    }    reverse(all(ans));    for (int i = 0; i < n; i++) {        if (i) cout << ' ';        cout << ans[i];    }    cout << endl;} int32_t main(){    ios_base::sync_with_stdio(0);    cin.tie(0);    int t = 1;    cin >> t;    while (t--) solve();    return 0;}