#include <bits/stdc++.h>using namespace std; #define int long long int#define endl '\n'#define all(x) x.begin(), x.end() void solve(){    int n, q;    cin >> n >> q;    string s;    cin >> s;    vector<int> a(q);    for (auto &x : a)        cin >> x;     auto opa = [&](int x) -> int    { return x > 0 ? x - 1 : 0; };    auto opb = [&](int x) -> int    { return x > 0 ? (x >> 1) : 0; };     auto circle = [&](int x) -> int    {        for (int i = 0; i < n && x > 0; i++)        {            x = (s[i] == 'A') ? opa(x) : opb(x);        }        return x;    };    const int LG = 35;    vector<function<int(int)>> up(LG);    up[0] = [&](int x)    { return circle(x); };    for (int j = 1; j < LG; j++)    {        up[j] = [&, j](int x)        {            x = up[j - 1](x);            if (x <= 0)                return 0LL;            return up[j - 1](x);        };    }     auto jump = [&](int x, int t) -> int    {        for (int j = 0; j < LG && x > 0; j++)        {            if (t & (1LL << j))                x = up[j](x);        }        return x;    };     bool bache = (s.find('B') != string::npos);     for (auto x : a)    {        if (x <= 0)        {            cout << 0 << endl;            continue;        }        if (!bache)        {            cout << x << endl;            continue;        }         int ans = 0;        int pos = 0;         auto ekst = [&](int &y, int &p) -> void        {            if (y <= 0)                return;            char c = s[p];            y = (c == 'A') ? (y - 1) : (y >> 1);            ans++;            p = (p + 1) % n;        };         while (x > 0)        {             for (int i = 0; i < n && x > 0; i++)            {                ekst(x, pos);            }            if (x == 0)                break;             int hi = 1;            while (jump(x, hi) > 0 && hi < (1LL << 32))                hi <<= 1;            int keep = 0, L = 0, R = hi;            while (L <= R)            {                int m = (L + R) >> 1;                if (jump(x, m) > 0)                {                    keep = m;                    L = m + 1;                }                else                    R = m - 1;            }            if (keep)            {                x = jump(x, keep);                ans += keep * 1LL * n;            }        }        cout << ans << endl;    }} int32_t main(){    ios_base::sync_with_stdio(0);    cin.tie(0);    int t = 1;    cin >> t;    while (t--)        solve();    return 0;}